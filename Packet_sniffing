#include <pcap.h>       // For Npcap functions
#include <iostream>     // For std::cout
#include <regex>        // For URL matching
#include <string>       // For string manipulation
#include <cstring>      // For string handling
#include <csignal>      // For signal handling (Ctrl+C)

// Global variable to track the capture loop state
volatile bool stopCapture = false;

// Signal handler for Ctrl+C
void handleSignal(int signal) {
    if (signal == SIGINT) {
        std::cout << "\n[INFO] Capture interrupted. Exiting gracefully...\n";
        stopCapture = true;
    }
}

// Function to list available network devices
void listDevices() {
    pcap_if_t* alldevs;
    char errbuf[PCAP_ERRBUF_SIZE];

    // Retrieve the list of network devices
    if (pcap_findalldevs(&alldevs, errbuf) == -1) {
        std::cerr << "Error finding devices: " << errbuf << std::endl;
        return;
    }

    std::cout << "Available Network Devices:" << std::endl;
    int i = 0;
    for (pcap_if_t* d = alldevs; d; d = d->next) {
        std::cout << ++i << ". " << (d->description ? d->description : "(No description)") << std::endl;
    }

    pcap_freealldevs(alldevs);
}

// Function to parse TCP payload for URLs
void detectURLs(const u_char* payload, int payloadLength) {
    if (payloadLength <= 0) return;

    std::string data(reinterpret_cast<const char*>(payload), payloadLength);

    // Match HTTP/HTTPS URLs
    std::regex urlRegex(R"(https?://[a-zA-Z0-9./?=_-]+)");
    std::smatch match;

    if (std::regex_search(data, match, urlRegex)) {
        std::cout << "[INFO] Detected URL: " << match.str() << std::endl;
    }
}

// Packet handler callback
void packetHandler(u_char* param, const struct pcap_pkthdr* header, const u_char* pkt_data) {
    const int ETH_HEADER_LEN = 14; // Ethernet header size
    const u_char* ipHeader = pkt_data + ETH_HEADER_LEN;

    // Ensure it's an IPv4 packet
    if ((ipHeader[0] >> 4) != 4) return;

    // Check protocol (TCP = 6)
    u_char protocol = ipHeader[9];
    if (protocol != 6) return;

    // Calculate IP header length
    int ipHeaderLen = (ipHeader[0] & 0x0F) * 4;

    // Extract TCP header
    const u_char* tcpHeader = ipHeader + ipHeaderLen;
    int tcpHeaderLen = (tcpHeader[12] >> 4) * 4;

    // Extract TCP payload
    const u_char* payload = tcpHeader + tcpHeaderLen;
    int payloadLength = header->len - (payload - pkt_data);

    // Debug output
    std::cout << "[DEBUG] Packet captured: Length = " << header->len
        << ", Payload Length = " << payloadLength << " bytes"
        << ", Protocol = TCP" << std::endl;

    if (payloadLength > 20) {  // Ignore small or empty packets
        detectURLs(payload, payloadLength);
    }
    else {
        std::cout << "[DEBUG] Non-data packet or small payload (ignored)." << std::endl;
    }
}

int main() {
    char errbuf[PCAP_ERRBUF_SIZE];
    pcap_if_t* alldevs;

    // Set up signal handling for Ctrl+C
    signal(SIGINT, handleSignal);

    // Retrieve the list of network devices
    if (pcap_findalldevs(&alldevs, errbuf) == -1) {
        std::cerr << "[ERROR] Error finding devices: " << errbuf << std::endl;
        return 1;
    }

    std::cout << "Select a Network Device:" << std::endl;
    int i = 0;
    for (pcap_if_t* d = alldevs; d; d = d->next) {
        std::cout << ++i << ". " << (d->description ? d->description : "(No description)") << std::endl;
    }

    int devNum;
    std::cin >> devNum;

    // Locate the selected device
    pcap_if_t* selectedDevice = alldevs;
    for (i = 1; i < devNum && selectedDevice; i++) {
        selectedDevice = selectedDevice->next;
    }

    if (!selectedDevice) {
        std::cerr << "[ERROR] Invalid selection." << std::endl;
        pcap_freealldevs(alldevs);
        return 1;
    }

    // Open the selected device for capturing
    pcap_t* handle = pcap_open_live(selectedDevice->name, 65536, 1, 1000, errbuf);
    if (!handle) {
        std::cerr << "[ERROR] Error opening device: " << errbuf << std::endl;
        pcap_freealldevs(alldevs);
        return 1;
    }

    std::cout << "[INFO] Capturing on device: "
        << (selectedDevice->description ? selectedDevice->description : "(No description)")
        << std::endl;

    // Start capturing packets in a loop until interrupted
    while (!stopCapture) {
        int result = pcap_dispatch(handle, 0, packetHandler, nullptr);
        if (result < 0) {
            std::cerr << "[ERROR] Capture error: " << pcap_geterr(handle) << std::endl;
            break;
        }
    }

    // Clean up
    pcap_close(handle);
    pcap_freealldevs(alldevs);

    std::cout << "[INFO] Capture session ended. Exiting...\n";

    return 0;
}
